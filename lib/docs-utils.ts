import fs from "fs";
import path from "path";

/**
 * üìÇ resolveDocFile
 *
 * Ez a f√ºggv√©ny egy megadott slug (URL √∫tvonal darabjai) alapj√°n megkeresi a hozz√°
 * tartoz√≥ MDX f√°jlt a `docs/` k√∂nyvt√°rban.
 *
 * üß≠ Keres√©si sorrend:
 *  1. `/docs/index.mdx` ‚Äî ha a slug √ºres (root dokument√°ci√≥)
 *  2. `/docs/[...slug]/index.mdx` ‚Äî ha a slug egy mapp√°ra mutat
 *  3. `/docs/[...slug].mdx` ‚Äî ha a slug konkr√©t f√°jln√©vre mutat
 *
 * üì¶ Visszat√©r√©si √©rt√©k:
 *  - string (f√°jlrendszer √∫tvonal), ha a f√°jl megtal√°lhat√≥
 *  - `null`, ha nem tal√°lhat√≥ semmi
 *
 * ‚úÖ Haszn√°lat:
 *  - Breadcrumbhoz
 *  - Metadata gener√°l√°shoz
 *  - Oldaltartalom bet√∂lt√©s√©hez
 */
export function resolveDocFile(slug: string[]) {
  const baseDir = path.join(process.cwd(), "docs");

  if (slug.length === 0) {
    const index = path.join(baseDir, "index.mdx");
    if (fs.existsSync(index)) return index;
  }

  const indexInDir = path.join(baseDir, ...slug, "index.mdx");
  if (fs.existsSync(indexInDir)) return indexInDir;

  const file = path.join(baseDir, ...slug) + ".mdx";
  if (fs.existsSync(file)) return file;

  return null;
}




/**
 * üîÑ restoreOriginalSlug
 *
 * Ez a f√ºggv√©ny visszaalak√≠tja a "megtiszt√≠tott" slugot az eredeti,
 * f√°jlrendszerbeli n√©vre, bele√©rtve az MDX f√°jlnevek elej√©n tal√°lhat√≥ sorsz√°mokat is.
 *
 * P√©lda:
 * - URL slug: ["app", "getting-started"]
 * - F√°jlrendszer: ["01-app", "01-getting-started"]
 *
 * üß≠ L√©p√©sek:
 *  - Beolvassa az aktu√°lis mappa tartalm√°t
 *  - Megkeresi a megfelel≈ë mapp√°t vagy f√°jlt, amelynek neve sorsz√°m + slug
 *  - A tal√°latot fokozatosan √©p√≠ti fel (rekurzi√≥ n√©lk√ºl, iterat√≠van)
 *
 * üì¶ Visszat√©r√©si √©rt√©k:
 *  - string[] ‚Äî az eredeti f√°jlrendszerbeli slug (sorsz√°mokkal)
 */

export function restoreOriginalSlug(cleaned: string[]) {
  const baseDir = path.join(process.cwd(), "docs");
  let currentPath = baseDir;
  const result: string[] = [];

  cleaned.forEach((segment, index) => {
    const entries = fs.readdirSync(currentPath);

    const dirMatch = entries.find(
      (e) =>
        fs.statSync(path.join(currentPath, e)).isDirectory() &&
        e.replace(/^\d+-/, "") === segment
    );

    const fileMatch = entries.find(
      (e) =>
        e.endsWith(".mdx") &&
        e.replace(/^\d+-/, "").replace(/\.mdx$/, "") === segment
    );
    // ha az utols√≥ slug egy f√°jlra mutat, azt haszn√°ljuk
    if (index === cleaned.length - 1 && fileMatch) {
      result.push(fileMatch.replace(/\.mdx$/, ""));
      return;
    }

    // egy√©bk√©nt mapp√°t pr√≥b√°lunk tal√°lni
    if (dirMatch) {
      result.push(dirMatch);
      currentPath = path.join(currentPath, dirMatch);
    } else {
      result.push(segment);
      currentPath = path.join(currentPath, segment);
    }
  });

  return result;
}

/**
 * üß≠ getTitleForSlug
 *
 * Megadott slughoz tartoz√≥ MDX f√°jlb√≥l kiolvassa a frontmatter `title` mez≈ëj√©t.
 *
 * üßæ P√©lda frontmatter:
 * ---
 * title: Getting Started
 * description: Els≈ë l√©p√©sek az App Routerrel
 * ---
 *
 * üì¶ Visszat√©r√©si √©rt√©k:
 *  - string ‚Äî a `title` √©rt√©ke
 *  - `null` ‚Äî ha a f√°jl nem tal√°lhat√≥, vagy nincs `title`
 *
 * ‚úÖ Haszn√°lat:
 *  - Breadcrumb c√≠mekhez
 *  - Metaadat gener√°l√°shoz
 */
export function getTitleForSlug(slugParts: string[]): string | null {
  const filePath = resolveDocFile(restoreOriginalSlug(slugParts));
  if (!filePath) return null;

  const source = fs.readFileSync(filePath, "utf8");
  const match = source.match(/^---([\s\S]*?)---/);
  if (match) {
    const titleMatch = match[1].match(/title:\s*(.*)/);
    if (titleMatch) return titleMatch[1].trim();
  }
  return null;
};


/**
 * üìù getDescriptionForSlug
 *
 * Megadott slughoz tartoz√≥ MDX f√°jlb√≥l kiolvassa a frontmatter `description` mez≈ëj√©t.
 * 
 * üì¶ Visszat√©r√©si √©rt√©k:
 *  - string ‚Äî a `description` √©rt√©ke
 *  - `null` ‚Äî ha a f√°jl nem tal√°lhat√≥ vagy nincs description
 *
 * ‚úÖ Haszn√°lat:
 *  - Metadata gener√°l√°sn√°l
 *  - SEO optimaliz√°l√°sn√°l
 */
export function getDescriptionForSlug(slugParts: string[]): string | null {
  const filePath = resolveDocFile(restoreOriginalSlug(slugParts));
  if (!filePath) return null;

  const source = fs.readFileSync(filePath, "utf8");
  const match = source.match(/^---([\s\S]*?)---/);
  if (match) {
    const descMatch = match[1].match(/description:\s*(.*)/);
    if (descMatch) return descMatch[1].trim();
  }
  return null;
};

/**
 * üìé restoreOriginalSourcePath
 *
 * A frontmatter `source` mez≈ë √©rt√©k√©t (pl. "app/telepites") √°talak√≠tja
 * abszol√∫t f√°jlrendszerbeli el√©r√©si √∫tt√°.
 *
 * üß≠ Keres√©si logika:
 *  - Megpr√≥b√°lja `source.mdx`-k√©nt
 *  - Ha nem tal√°lhat√≥, pr√≥b√°lja `source/index.mdx`-k√©nt
 *
 * üì¶ Visszat√©r√©si √©rt√©k:
 *  - string ‚Äî f√°jl el√©r√©si √∫t
 *  - fallbackk√©nt visszaadja az els≈ë pr√≥b√°lt √∫tvonalat
 *
 * ‚úÖ Haszn√°lat:
 *  - T√∂bb MDX f√°jl √∂sszef≈±z√©s√©hez
 *  - Reusable content (pl. k√∂z√∂s szekci√≥k) beilleszt√©s√©hez
 */
export function restoreOriginalSourcePath(source: string) {
  const segments = source.split("/");
  const restoredSegments = restoreOriginalSlug(segments);
  const baseDir = path.join(process.cwd(), "docs");

  const filePath = path.join(baseDir, ...restoredSegments) + ".mdx";
  if (fs.existsSync(filePath)) return filePath;

  const indexPath = path.join(baseDir, ...restoredSegments, "index.mdx");
  if (fs.existsSync(indexPath)) return indexPath;

  return filePath;
};


/**
 * üîó resolveRelatedLinks
 *
 * Egy MDX oldal frontmatter `related.links` mez≈ëj√©ben megadott hivatkoz√°sokat feldolgozza:
 *  - Megkeresi az adott f√°jlt
 *  - Kiolvassa a `title` mez≈ët (ha van)
 *  - √ñssze√°ll√≠t egy t√∂mb√∂t link objektumokkal
 *
 * üßæ P√©lda:
 * related:
 *   links:
 *     - app/getting-started
 *     - app/routing
 *
 * üì¶ Visszat√©r√©si √©rt√©k:
 *  - Array<{ title: string; href: string }>
 * 
 * ‚úÖ Haszn√°lat:
 *  - Oldalak v√©g√©n ‚ÄûKapcsol√≥d√≥ t√©m√°k‚Äù blokk gener√°l√°s√°hoz
 */
export function resolveRelatedLinks(links: string[]) {
  const result: { title: string; href: string }[] = [];

  for (const link of links) {
    const filePath = restoreOriginalSourcePath(link);
    if (fs.existsSync(filePath)) {
      const source = fs.readFileSync(filePath, "utf8");
      const frontmatter = source.match(/^---([\s\S]*?)---/);
      let title = link.split("/").pop() || "";

      if (frontmatter) {
        const titleMatch = frontmatter[1].match(/title:\s*(.*)/);
        if (titleMatch) title = titleMatch[1].trim();
      }

      result.push({ title, href: `/docs/${link}` });
    }
  }

  return result;
};
