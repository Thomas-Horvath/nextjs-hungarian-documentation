import type { Metadata } from "next";
import { getTitleForSlug, getDescriptionForSlug } from "./docs-utils";

/**
 * ğŸ“„ generatePageMetadata
 * 
 * Ez a fÃ¼ggvÃ©ny **automatikusan legenerÃ¡lja a Next.js oldalhoz tartozÃ³ metaadatokat**
 * (pl. SEO `<title>` Ã©s `<meta description>`) a `docs/` mappÃ¡ban talÃ¡lhatÃ³ 
 * MDX fÃ¡jlok frontmatter mezÅ‘i alapjÃ¡n.
 * 
 * ğŸ”¸ HasznÃ¡lat:
 * - A Next.js `generateMetadata` API-ban hÃ­vjuk meg (page.tsx fÃ¡jlban)
 * - ParamÃ©terkÃ©nt megkapja a dinamikus route slugjÃ¡t (pl. ["app", "getting-started"])
 * - A slugot a rendszer a megfelelÅ‘ MDX fÃ¡jlhoz rendeli
 * - Kinyeri belÅ‘le a `title` Ã©s `description` mezÅ‘ket a frontmatterbÅ‘l
 * 
 * ğŸ“Œ PÃ©lda frontmatter:
 * ---
 * title: Getting Started
 * description: ElsÅ‘ lÃ©pÃ©sek az App Routerrel
 * ---
 * 
 * ğŸª„ VisszatÃ©rÃ©si Ã©rtÃ©k:
 * - `Metadata` objektum, amit a Next.js automatikusan beÃ©pÃ­t a head rÃ©szbe.
 * - Ha nincs title vagy description a frontmatterben,
 *   alapÃ©rtelmezett Ã©rtÃ©keket hasznÃ¡l (globÃ¡lis fallback).
 * 
 * âœ… ElÅ‘ny:
 * - Nem kell kÃ©zzel beÃ¡llÃ­tani minden oldalon a SEO metaadatokat
 * - Automatikusan szinkronban marad a dokumentÃ¡ciÃ³ tartalmÃ¡val
 */
export function generatePageMetadata(slugParts: string[]): Metadata {
    const title = getTitleForSlug(slugParts);
    const description = getDescriptionForSlug(slugParts);

    return {
        title: title ?? "Next.js Magyar DokumentÃ¡ciÃ³",
        description:
            description ??
            "Fedezd fel a Next.js hivatalos dokumentÃ¡ciÃ³jÃ¡t magyar nyelven â€” magyarÃ¡zatokkal Ã©s pÃ©ldÃ¡kkal.",
    };
}
